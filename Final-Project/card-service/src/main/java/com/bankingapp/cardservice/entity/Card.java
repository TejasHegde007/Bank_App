package com.bankingapp.cardservice.entity;

import com.bankingapp.cardservice.enums.CardType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;

/**
 * Entity representing a banking card (Debit or Credit).
 * References user-service and account-service through IDs.
 */
@Entity
@Table(
        name = "cards",
        uniqueConstraints = @UniqueConstraint(columnNames = "card_number")
)
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Card {

    // ---------------------- Primary Key ----------------------
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "card_seq_gen")
    @SequenceGenerator(
            name = "card_seq_gen",
            sequenceName = "card_seq",
            allocationSize = 1
    )
    @Column(name = "id", nullable = false, updatable = false)
    private Long id;

    // ---------------------- Core Fields ----------------------
    @Column(name = "card_number", length = 12, nullable = false, unique = true)
    private String cardNumber; // auto-generated by service

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "card_type", length = 10, nullable = false)
    private CardType cardType;

    @NotBlank
    @Size(max = 100)
    @Column(name = "card_holder_name", length = 100, nullable = false)
    private String cardHolderName;

    @Column(name = "issue_date")
    private LocalDate issueDate;

    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @Column(name = "credit_limit", precision = 19, scale = 2)
    private BigDecimal creditLimit; // only for CREDIT cards

    @Column(name = "available_limit", precision = 19, scale = 2)
    private BigDecimal availableLimit; // only for CREDIT cards

    @Column(name = "is_blocked", nullable = false)
    private Boolean isBlocked = Boolean.FALSE;

    // ---------------------- Cross-Service References ----------------------
    @NotNull
    @Column(name = "user_id", length = 36, nullable = false)
    private String userId; // from user-service

    @NotNull
    @Column(name = "account_id", length = 36, nullable = false)
    private String accountId; // from account-service

    // ---------------------- Lifecycle Defaults ----------------------
    @PrePersist
    private void prePersistDefaults() {
        if (this.cardType == CardType.CREDIT && this.availableLimit == null && this.creditLimit != null) {
            this.availableLimit = this.creditLimit;
        }
        if (this.isBlocked == null) {
            this.isBlocked = Boolean.FALSE;
        }
        if (this.issueDate == null) {
            this.issueDate = LocalDate.now();
        }
        if (this.expiryDate == null) {
            this.expiryDate = LocalDate.now().plusYears(5);
        }
    }
}
